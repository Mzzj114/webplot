{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Webplot Webplot is a tool for organizing ideas, featuring nodes that support rich text. This project aims to create an intuitive and visually appealing editor for network graphs. This project is a work in progress and serves as a personal tool for idea organization. Its features aim to make graph-based thinking and planning more intuitive and visually engaging. It is much simpler and easy to use compare to other products in making mind maps or other network diagrams. you can download it from here via github. Download Webplot Features Rich Text Nodes : Each node in the graph can contain rich text, allowing for detailed and flexible content. Customizable Design : Nodes can be styled to look like sticky notes, with features like pushpins for added aesthetics. Interactive Editing : Right-click menus for nodes and the canvas make editing seamless. Advanced Visuals : Uses AntV G6 for rendering high-quality topology graphs. Tech Stack Backend : Python Frontend : JavaScript, HTML (using Layui ) Application Framework : pywebView Webplot is under MIT License .","title":"Home"},{"location":"#webplot","text":"Webplot is a tool for organizing ideas, featuring nodes that support rich text. This project aims to create an intuitive and visually appealing editor for network graphs. This project is a work in progress and serves as a personal tool for idea organization. Its features aim to make graph-based thinking and planning more intuitive and visually engaging. It is much simpler and easy to use compare to other products in making mind maps or other network diagrams. you can download it from here via github. Download Webplot","title":"Webplot"},{"location":"#features","text":"Rich Text Nodes : Each node in the graph can contain rich text, allowing for detailed and flexible content. Customizable Design : Nodes can be styled to look like sticky notes, with features like pushpins for added aesthetics. Interactive Editing : Right-click menus for nodes and the canvas make editing seamless. Advanced Visuals : Uses AntV G6 for rendering high-quality topology graphs.","title":"Features"},{"location":"#tech-stack","text":"Backend : Python Frontend : JavaScript, HTML (using Layui ) Application Framework : pywebView Webplot is under MIT License .","title":"Tech Stack"},{"location":"about/","text":"About Webplot is initally developed by an amateur programming enthusiast, Randy Zhu. Since this is a personal project, updates will be irregular. I work on it whenever I find the time and inspiration. Your feedback and suggestions are always welcome to help improve the project! Thank you for visiting this project! I hope you find Webplot useful, and feel free to contribute or share your thoughts to help it grow.","title":"About"},{"location":"about/#about","text":"Webplot is initally developed by an amateur programming enthusiast, Randy Zhu. Since this is a personal project, updates will be irregular. I work on it whenever I find the time and inspiration. Your feedback and suggestions are always welcome to help improve the project! Thank you for visiting this project! I hope you find Webplot useful, and feel free to contribute or share your thoughts to help it grow.","title":"About"},{"location":"docs/","text":"Documentations Installation 1. Use packed executable file You can directly downloand the version of excutable file from release that fits your operation system (currently only windows version is available and only windows 10 is tested) 2. Run from source code You can also run the app from source code. First , download source code of the project. You can run $ git clone https://github.com/Mzzj114/webplot.git Second , install Python 3.11.5 if you didn't. See https://www.python.org/downloads/ Third , download python requirements by running command below in the repository directory. $ pip install -r requirements.txt Finally , run main.py in the repository directory using $ python main.py 3. Build the project You can still build the project using Pyinstaller. First , do all the steps in \"2. Run from source code\" Second , install pyinstaller using $ pip install pyinstaller Third , build the project by running $ pyinstaller --onefile --windowed --icon=\"./asset/img/webplot.ico\" -p .\\venv\\Lib\\site-packages main.py The executable file should be available at dist/ Usage","title":"Documentations"},{"location":"docs/#documentations","text":"","title":"Documentations"},{"location":"docs/#installation","text":"","title":"Installation"},{"location":"docs/#1-use-packed-executable-file","text":"You can directly downloand the version of excutable file from release that fits your operation system (currently only windows version is available and only windows 10 is tested)","title":"1. Use packed executable file"},{"location":"docs/#2-run-from-source-code","text":"You can also run the app from source code. First , download source code of the project. You can run $ git clone https://github.com/Mzzj114/webplot.git Second , install Python 3.11.5 if you didn't. See https://www.python.org/downloads/ Third , download python requirements by running command below in the repository directory. $ pip install -r requirements.txt Finally , run main.py in the repository directory using $ python main.py","title":"2. Run from source code"},{"location":"docs/#3-build-the-project","text":"You can still build the project using Pyinstaller. First , do all the steps in \"2. Run from source code\" Second , install pyinstaller using $ pip install pyinstaller Third , build the project by running $ pyinstaller --onefile --windowed --icon=\"./asset/img/webplot.ico\" -p .\\venv\\Lib\\site-packages main.py The executable file should be available at dist/","title":"3. Build the project"},{"location":"docs/#usage","text":"","title":"Usage"}]}